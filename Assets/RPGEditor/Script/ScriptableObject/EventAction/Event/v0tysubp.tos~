using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;
using System.Reflection;
using System.Linq;

[System.Serializable]
public class EventRPG
{   
    public int ID = -1;
    public int nextEvents = -1;
    public int Action = -1;
    
    public List<Parametre> parametres;

    public EventRPG()
    {
        parametres = new List<Parametre>();

        parametres.Add(new Parametre(typeof(string)));
        parametres.Add(new Parametre(typeof(string)));
    }

    public virtual void Update()
    {
        object entity = RPGManager.Instanse.GetEntity(parametres[0]);
        if(entity != null)
        {
            Type type = entity.GetType();
            MethodInfo methodInfo =  type.GetMethod(parametres[1].parameterString);
            if((bool)methodInfo.Invoke(entity, GetParametreArray(parametres)))
            {
                if (Action != -1)
                    RPGManager.Instanse.EventActionList.actionList[Action].Update();
            }
        }

        if (nextEvents != -1)
            RPGManager.Instanse.EventActionList.eventList[nextEvents].Update();
    }

    object[] GetParametreArray(List<Parametre> parametres)
    {
        List<object> objects = new List<object>();
        for(int i= 2; i< parametres.Count;i++)
        {
            if(parametres[i].GetParameterType() == typeof(int))
                objects.Add(parametres[i].parameterInt);
            if (parametres[i].GetParameterType() == typeof(bool))
                objects.Add(parametres[i].parameterBool);
            if (parametres[i].GetParameterType() == typeof(string))
                objects.Add(parametres[i].parameterString);
            if (parametres[i].GetParameterType() == typeof(float))
                objects.Add(parametres[i].parameterfloat);
            else
            {
                object entity = RPGManager.Instanse.GetEntity(parametres[i]);
                objects.Add(entity);
            }
        }

        return objects.ToArray();
    }

}

[System.Serializable]
public class EmptyEventRPG : EventRPG
{
    public EmptyEventRPG()
    {
    }

    public override void Update()
    {
        
        if (Action != -1)
        {
            RPGManager.Instanse.EventActionList.actionList[Action].Update();
        }

        if (nextEvents != -1)
            RPGManager.Instanse.EventActionList.eventList[nextEvents].Update();
    }
}
[System.Serializable]
public class Parametre
{
    public Parametre(Type _type)
    {
        typeName = _type.FullName;
    }

    public int parameterInt;
    public bool parameterBool;
    public string parameterString;
    public float parameterfloat;

    public string typeName;
    public int selected = 0;

    public Type GetParameterType()
    {
        string TypeName = typeName;
        // Try Type.GetType() first. This will work with types defined
        // by the Mono runtime, in the same assembly as the caller, etc.
        var type = Type.GetType(TypeName);

        // If it worked, then we're done here
        if (type != null)
            return type;

        // If the TypeName is a full name, then we can try loading the defining assembly directly
        if (TypeName.Contains("."))
        {

            // Get the name of the assembly (Assumption is that we are using 
            // fully-qualified type names)
            var assemblyName = TypeName.Substring(0, TypeName.IndexOf('.'));

            // Attempt to load the indicated Assembly
            var assembly = Assembly.Load(assemblyName);
            if (assembly == null)
                return null;

            // Ask that assembly to return the proper Type
            type = assembly.GetType(TypeName);
            if (type != null)
                return type;

        }

        // If we still haven't found the proper type, we can enumerate all of the 
        // loaded assemblies and see if any of them define the type
        var currentAssembly = Assembly.GetExecutingAssembly();
        var referencedAssemblies = currentAssembly.GetReferencedAssemblies();
        foreach (var assemblyName in referencedAssemblies)
        {

            // Load the referenced assembly
            var assembly = Assembly.Load(assemblyName);
            if (assembly != null)
            {
                // See if that assembly defines the named type
                type = assembly.GetType(TypeName);
                if (type != null)
                    return type;
            }
        }

        // The type just couldn't be found...
        return null;

    }
}





